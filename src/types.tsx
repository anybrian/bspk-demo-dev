import { ComponentExample, DemoPreset, TypePropertyDemo } from '@bspk/ui/utils/demo';
import type { RouteObject } from 'react-router-dom';
import { ComponentMeta, TypeMeta } from 'src/meta';

export type ActionCallback = (message: string) => void;

export type Noop = () => void;

export type RouteLink = RouteObject & {
    title: string;
    hide?: boolean;
    description?: string;
    children?: RouteLink[];
    active?: boolean;
    noIndex?: boolean;
};

/**
 * Represents a component that can be used in the demo system. It extends the ComponentExample type with additional
 * properties such as name, props, dependencies, and functionProps.
 */
export type DemoComponent<P extends Record<string, unknown> = any> = Omit<ComponentExample<P>, 'presets'> &
    Omit<ComponentMeta, 'dependencies'> & {
        /**
         * The name of the component, used for display and identification. It should be unique within the demo system.
         * It is also used to generate the route path for the component.
         */
        name: string;
        /**
         * The properties of the component, which define its API and behavior. This is an array of TypePropertyDemo
         * objects that describe each property.
         */
        props: TypePropertyDemo[];
        /**
         * The dependencies of the component, which are other components that this component relies on. This is an array
         * of ComponentMeta objects that describe each dependency.
         */
        dependencies: ComponentMeta[];
        /**
         * The components that depend on this component. This is an array of ComponentMeta objects that describe each
         * dependent. Automatically generated by the meta script.
         */
        dependents: ComponentMeta[];
        /**
         * The references to other types used by this component. This is an array of TypeMeta objects that describe each
         * reference. Automatically generated by the meta script.
         */
        references: TypeMeta[];
        /**
         * The presets for the component, which are predefined configurations for different use cases. This is an array
         * of DemoPreset objects that describe each preset.
         */
        presets?: DemoPreset[];
        /**
         * The function properties of the component, which are functions that can be used to modify the component's
         * behavior.
         */
        functionProps: Record<string, () => void>;
        /**
         * The style of the component's container, which can be a CSSProperties object or a function that returns a
         * CSSProperties object based on the component's propState.
         */
        containerStyle?: React.CSSProperties | ((propState: P) => React.CSSProperties);
        /** The initial state of the component's properties. This is a record of property names and their default values. */
        defaultState: Record<string, any>;
        /**
         * Indicates whether the component should be shown in the example section.
         *
         * Specifically used to utility
         */
        showExample: boolean;
    };

/** Copyright 2025 Anywhere Real Estate - CC BY 4.0 */
